[
  {
    "objectID": "01-fundamentos_r.html#rstudio",
    "href": "01-fundamentos_r.html#rstudio",
    "title": "1  Fundamentos de R",
    "section": "1.1 RStudio",
    "text": "1.1 RStudio\nPara instalação, faça o download do R em http://www.r-project.org. Em seguida, instale a IDE (Integrated Development Environment) R Studio.\nAo abrir o RStudio, clique no menu File/ New File/ R Script (ou Ctrl+Shift+N). Você deve ver uma estrutura como a mostrada na figura abaixo.\n\n\n\nInterface do Rstudio\n\n\nNote que são quatro paineis:\n\nPainel de Scripts (superior esquerdo): este painel é onde você pode escrever, editar e executar scripts R. Ele fornece recursos como destaque de sintaxe, autocompletar e verificação de código para ajudar na escrita de código.\nPainel de Console (inferior esquerdo):o console é onde o código R é executado e os resultados são exibidos. Você pode inserir comandos diretamente aqui e ver imediatamente os resultados. Ele também mantém um histórico de comandos executados, o que pode ser útil para referência futura.\nAmbiente/Workspace (superior direito): este painel exibe informações sobre os objetos (como variáveis, funções, etc.) atualmente carregados na memória do R. Ele mostra detalhes como o nome do objeto, tipo de objeto e seu valor atual. Isso é útil para monitorar e gerenciar objetos durante uma sessão de trabalho.\nArquivos/Plots/Pacotes/Ajuda (inferior direito): um painel com diversas funcionalidades.\n\nArquivos: Esta guia permite navegar e gerenciar os arquivos do seu projeto. Você pode criar, renomear, excluir e organizar arquivos e pastas diretamente dentro do RStudio.\nGráficos (Plots): Aqui são exibidos os gráficos gerados pelo R. Quando você cria um gráfico usando funções de visualização em R, o resultado é exibido nesta guia. Isso facilita a análise visual dos seus dados e a inspeção dos gráficos durante o processo de criação.\nPacotes: Nesta guia, você pode visualizar e gerenciar os pacotes instalados no seu ambiente R. Ela exibe uma lista de todos os pacotes instalados, juntamente com sua versão e status (carregado ou não). Além disso, você pode instalar novos pacotes, atualizar pacotes existentes e carregar ou descarregar pacotes conforme necessário para o seu trabalho.\nAjuda (Help): Esta guia fornece acesso rápido à documentação e às informações de ajuda sobre funções, pacotes e outros recursos do R. Você pode pesquisar por tópicos específicos e acessar a documentação oficial diretamente no RStudio. Isso é útil para obter informações sobre a sintaxe de uma função, exemplos de uso e detalhes sobre os parâmetros disponíveis."
  },
  {
    "objectID": "01-fundamentos_r.html#sec-tipodedados",
    "href": "01-fundamentos_r.html#sec-tipodedados",
    "title": "1  Fundamentos de R",
    "section": "1.2 Tipos de dados",
    "text": "1.2 Tipos de dados\nSempre que estiver aprendendo uma nova linguagem, procure primeiro saber quais são os tipos de dados básicos que podem ser representandos nessa linguagem.\nEm R, são quatro os tipos básicos de dados disponíveis: numéricos, lógicos, caracteres e fatores.\n\n1.2.1 O tipo de dado numérico\nOs dados numéricos (numeric) são usados para expressar valores quantitativos, como preços, taxas e quantidades, sendo representados por números inteiros ou decimais.\n\n# Número inteiro representando quantidade de acoes em uma carteira\nqtd_acoes &lt;- 100\n\n# Número de ponto flutuante representando a taxa de inflação\ntaxa_inflacao &lt;- 3.5\n\n# Verificando a classe de taxa_inflacao\nclass(taxa_inflacao)\n\n[1] \"numeric\"\n\n\nA função class() é usada para determinar a classe de uma variável. Em outras palavras, ela fornece informações sobre o tipo de dado que uma variável representa. Nesse caso acima, a variável taxa_inflacao é da classe numeric.\n\n\n1.2.2 O tipo de dado lógico\nOs dados lógicos (logical) são empregados para representar estados ou condições, como verdadeiro ou falso, sendo úteis em operações de lógica e comparação.\n\n# Verificando se a taxa de juros está aumentando\ntaxa_juros_aumentando &lt;- TRUE\n\n# Verificando se o preço das ações está caindo\nqueda_preco_acoes &lt;- FALSE\n\n# Verificando a classe de queda_preco_acoes\nclass(queda_preco_acoes)\n\n[1] \"logical\"\n\n\n\n\n1.2.3 O tipo de dado caractere\nJá os dados do tipo caractere (character) são utilizados para representar texto, como nomes de países, empresas ou categorias, sendo essenciais em análises descritivas e comunicação de resultados.\n\n# Nome de um país\npais &lt;- \"Brasil\"\n\n# Nome de uma empresa multinacional\nempresa &lt;- \"Petróleo Brasileiro S.A.\"\n\n# Verificando a classe de pais\nclass(pais)\n\n[1] \"character\"\n\n\n\n\n1.2.4 O tipo de dado fator\nOs fatores (factor) são empregados para representar variáveis categóricas, como classificações, categorias ou grupos, uma forma eficiente de lidar com dados discretos e qualitativos.\n\n# Classificação do risco de crédito de uma empresa\nrisco_credito &lt;- factor(c(\"Baixo\", \"Médio\", \"Alto\", \"Baixo\", \"Alto\"))\n\n# Verificando a classe de risco_credito\nclass(risco_credito)\n\n[1] \"factor\"\n\n\nA função levels() retorna os níveis (ou categorias) de um fator. Isso é útil para entender quais são as categorias representadas pelo fator e para realizar operações de manipulação de dados com base nessas categorias.\n\n# Exibindo os níveis de risco de crédito\nlevels(risco_credito)\n\n[1] \"Alto\"  \"Baixo\" \"Médio\""
  },
  {
    "objectID": "01-fundamentos_r.html#fundamentos-da-linguagem",
    "href": "01-fundamentos_r.html#fundamentos-da-linguagem",
    "title": "1  Fundamentos de R",
    "section": "1.3 Fundamentos da linguagem",
    "text": "1.3 Fundamentos da linguagem\nO ambiente R refere-se ao espaço de trabalho onde todas as variáveis, funções e objetos criados durante uma sessão R são armazenados e manipulados. O ambiente inclui tanto os objetos que você criou quanto os que são carregados automaticamente por meio de pacotes ou outros mecanismos de importação de dados (mais sobre pacotes a seguir).\nPor exemplo, ao usar a função ls() (que lista os nomes dos objetos no ambiente atual), podemos ver todos os objetos atualmente presentes no ambiente R.\n\n\nls()\n\nSe você executou corretamente todos os comandos da Section 1.2, deve obter como resultado no console o seguinte:\n[1] \"empresa\"               \"pais\"                  \"qtd_acoes\"\n[4] \"queda_preco_acoes\"     \"taxa_inflacao\"         \"taxa_juros_aumentando\"\nusando R como calculadora numeros especiais"
  },
  {
    "objectID": "01-fundamentos_r.html#variáveis",
    "href": "01-fundamentos_r.html#variáveis",
    "title": "1  Fundamentos de R",
    "section": "1.4 Variáveis",
    "text": "1.4 Variáveis\nNa Section 1.2 algumas variáveis foram criadas. Por exemplo a variável empresa que armazena uma cadeia de caracteres. Você viu, anteriormente a maneira de listar todas as variáveis definidas no seu ambiente. Mas, afinal, o que são variáveis?\nNo R, variáveis são elementos fundamentais usados para armazenar e manipular dados. Elas são como recipientes que guardam valores, objetos ou expressões. Quando você atribui um valor a uma variável, está basicamente dando um nome a esse valor para poder acessá-lo e manipulá-lo posteriormente.\nPor exemplo, ao escrever preco_acao &lt;- 10, você está criando uma variável chamada preco_acao e atribuindo a ela o valor 10. Agora, sempre que você usar preco_acao em seu código, estará se referindo a esse valor.\nUma prática comum escolher nomes descritivos para variáveis que ajudem a entender seu propósito ou conteúdo. Por exemplo, em um contexto econômico, você pode usar preco_acao para representar o preço de uma ação ou taxa_inflacao para representar a taxa de inflação.\nPara atribuir um valor a uma variável, use o operador &lt;-. O operador = também pode ser usado para atribuir valores a variáveis. Ambos os operadores têm o mesmo efeito prático na atribuição de valores a variáveis em R. A escolha entre eles geralmente se resume à preferência pessoal e ao estilo de codificação, embora alguns guias de estilo de código sugiram o uso do &lt;-."
  },
  {
    "objectID": "01-fundamentos_r.html#verificando-o-tipo-de-uma-variável",
    "href": "01-fundamentos_r.html#verificando-o-tipo-de-uma-variável",
    "title": "1  Fundamentos de R",
    "section": "1.5 Verificando o tipo de uma variável",
    "text": "1.5 Verificando o tipo de uma variável\nVamos usar as funções da família is.* para vericar os tipos de algumas das variáveis que estão no nosso ambiente de trabalho.\n\nPara a variável empresa:\n\n\nis.character(empresa)\n\nIsso retornará TRUE se a variável empresa for do tipo caractere (character).\n\nPara a variável pais:\n\n\nis.character(pais)\n\nAssim como para a variável empresa, isso retornará TRUE se a variável pais for do tipo caractere.\n\nPara a variável qtd_acoes:\n\n\nis.numeric(qtd_acoes)\n\nIsso retornará TRUE se a variável qtd_acoes for do tipo numérico (numeric).\n\nPara a variável queda_preco_acoes:\n\n\nis.logical(queda_preco_acoes)\n\nIsso retornará TRUE se a variável queda_preco_acoes for do tipo lógico (logical).\n\nPara a variável taxa_inflacao:\n\n\nis.numeric(taxa_inflacao)\n\nAssim como para a variável qtd_acoes, isso retornará TRUE se a variável taxa_inflacao for do tipo numérico.\n\nPara a variável taxa_juros_aumentando:\n\n\nis.logical(taxa_juros_aumentando)\n\nIsso retornará TRUE se a variável taxa_juros_aumentando for do tipo lógico.\nEsses exemplos ilustram como você pode usar as funções is.* para verificar o tipo de variáveis, ajudando a garantir que você esteja manipulando os dados corretamente em suas análises.\nOutra família de funções importantes é a das funções as.*. Elas são usadas para converter um objeto de um tipo para outro. Elas permitem que você altere o tipo de dado de uma variável, o que pode ser útil em várias situações, como quando você precisa realizar operações específicas que exigem um determinado tipo de dado ou quando deseja garantir a consistência dos tipos de dados em seu código.\nAlgumas das funções as.* mais comuns incluem:\n\nas.character(): Converte um objeto para o tipo caractere (character).\n\n\nnumero &lt;- 123\nnumero_caractere &lt;- as.character(numero)\n\n\nas.numeric(): Converte um objeto para o tipo numérico (numeric).\n\n\ntexto &lt;- \"3.14\"\nnumero &lt;- as.numeric(texto)\n\n\nas.logical():\n\n\nnumero &lt;- 0\nlogico &lt;- as.logical(numero)\n\nEssas funções são úteis para garantir que os tipos de dados estejam corretos em seu código e para garantir que você possa realizar as operações desejadas em seus objetos. No entanto, é importante observar que nem todas as conversões podem ser bem-sucedidas, especialmente quando há perda de informações (por exemplo, ao converter de caractere para numérico). Portanto, é sempre uma boa prática verificar se a conversão foi feita corretamente e se os dados resultantes são os esperados.\nVeja um exemplo de conversão de caractere para numérico com texto não numérico:\n\ntexto &lt;- \"abc\"\nnumero &lt;- as.numeric(texto)\n\nWarning: NAs introduzidos por coerção\n\n\nNeste exemplo, a tentativa de converter o texto “abc” para um número resultará em um valor NA (Not Available), indicando que a conversão falhou. Veja que a saída do console indica uma mensagem de warning."
  },
  {
    "objectID": "01-fundamentos_r.html#estruturas-de-dados",
    "href": "01-fundamentos_r.html#estruturas-de-dados",
    "title": "1  Fundamentos de R",
    "section": "1.6 Estruturas de dados",
    "text": "1.6 Estruturas de dados\nEm toda análises de dados, é comum lidar com conjuntos de dados que possuem diferentes estruturas e formatos. Vamos explorar quatro estruturas de dados fundamentais em R: vetor, matriz, lista e DataFrame.\n\n1.6.1 Vetores\nUm vetor em R é uma estrutura de dados unidimensional que armazena uma sequência ordenada de elementos do mesmo tipo. A função c nos ajuda a criar vetores.\n\n# Vetor de preços de ações\nprecos_acoes &lt;- c(100, 110, 105, 120, 115)\n\nEm alguns casos, é de interesse definir sequências de números usando os operadores : e a função seq().\n\n# Vetor de números de 1 a 10\nsequencia &lt;- 1:10\nsequencia\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\n\n# Vetor de números de 1 a 10 com incremento de 2\nsequencia_incremento &lt;- seq(from = 1, to = 10, by = 2)\nsequencia_incremento\n\n[1] 1 3 5 7 9\n\n\nPara verificar o tamanho de um vetor, você pode usar a função length().\n\n# Verificando o tamanho do vetor de preços de ações\nlength(precos_acoes)\n\n[1] 5\n\nlength(1:10)\n\n[1] 10\n\n\nPara acessar elementos em um vetor em R, você pode usar índices numéricos ou lógicos dentro dos colchetes [ ].\nVocê pode acessar elementos usando índices numéricos dentro dos colchetes [ ]. Por exemplo, vetor[i] acessa o elemento na posição i do vetor.\n\n# Vetor de preços de ações\nprecos_acoes &lt;- c(100, 110, 105, 120, 115)\n\n# Acessando o segundo elemento do vetor\nsegundo_elemento &lt;- precos_acoes[2]\n\n# Acessando uma série de elementos do vetor\nvarios_elementos &lt;- precos_acoes[3:5]\n\nVocê também pode acessar elementos usando índices lógicos dentro dos colchetes [ ]. Por exemplo, vetor[indices_logicos] retorna os elementos do vetor onde os índices lógicos são TRUE.\n\n# Acessando preços de ações maiores que 110\nprecos_maior_que_110 &lt;- precos_acoes[precos_acoes &gt; 110]\n\n\n\n1.6.2 Matrizes\nUma matriz em R é uma estrutura de dados bidimensional que consiste em linhas e colunas de elementos do mesmo tipo. É útil para representar conjuntos de dados tabulares, como dados de séries temporais ou matrizes de covariância.\n\n# Matriz de retornos de ativos\nretornos_ativos &lt;- matrix(c(0.05, 0.03, 0.02, 0.04, 0.06, 0.03), \n                          nrow = 2, byrow = TRUE)\nrownames(retornos_ativos) &lt;- c(\"Ação 1\", \"Ação 2\")\ncolnames(retornos_ativos) &lt;- c(\"Ano 1\", \"Ano 2\", \"Ano 3\")\n\nO código acima cria uma matriz chamada retornos_ativos que armazena os retornos de dois ativos ao longo de três anos.\nA função matrix() é usada para criar a matriz. O vetor c(0.05, 0.03, 0.02, 0.04, 0.06, 0.03) contém os valores dos retornos dos ativos, fornecidos em ordem de preenchimento de coluna (de cima para baixo). Os parâmetros nrow = 2 e byrow = TRUE indicam que a matriz deve ter 2 linhas (para representar os dois ativos) e que os valores devem ser preenchidos por linha (ou seja, primeiro os retornos para o ano 1, depois para o ano 2 e assim por diante). As funções rownames() e colnames() são usadas para atribuir nomes às linhas e colunas da matriz, respectivamente. No caso das linhas, são atribuídos os nomes “Ação 1” e “Ação 2”, representando os dois ativos. Para as colunas, são atribuídos os nomes “Ano 1”, “Ano 2” e “Ano 3”, representando os anos em que os retornos foram registrados.\nA função class() retorna a classe do objeto, que neste caso será “matrix”, indicando que retornos_ativos é uma matriz em R.\nA função dim() retorna as dimensões da matriz, ou seja, o número de linhas e colunas.\n\n# Verificando as dimensões da matriz\ndim(retornos_ativos)\n\n[1] 2 3\n\n\nNeste caso, o resultado será [2, 3], indicando que a matriz possui 2 linhas e 3 colunas.\nAs funções nrow() e ncol() retornam o número de linhas e colunas da matriz, respectivamente.\n\nc(nrow(retornos_ativos), ncol(retornos_ativos))\n\n[1] 2 3\n\n\nA função length() retorna o número total de elementos em um objeto. Para uma matriz, isso retornará o número total de elementos, ou seja, o produto do número de linhas pelo número de colunas.\n\nlength(retornos_ativos)\n\n[1] 6\n\n\nPara acessar linhas, colunas e elementos em uma matriz em R, você pode usar índices numéricos ou nomes (se definidos). Aqui está como fazer:\n\nAcessando Linhas e Colunas: Você pode acessar linhas e colunas usando índices numéricos dentro dos colchetes [ ]. Por exemplo, matriz[i, ] acessa a linha i e matriz[, j] acessa a coluna j. Para acessar uma célula específica, você usa matriz[i, j], onde i é o número da linha e j é o número da coluna.\n\n\n# Acessando a primeira linha da matriz\nprimeira_linha &lt;- retornos_ativos[1, ]\n\n# Acessando a segunda coluna da matriz\nsegunda_coluna &lt;- retornos_ativos[, 2]\n\n# Acessando o elemento na segunda linha e terceira coluna da matriz\nelemento &lt;- retornos_ativos[2, 3]\n\n\nAcessando Linhas e Colunas por Nomes: Se você definiu nomes para as linhas e/ou colunas da matriz, você pode acessá-las usando esses nomes.\n\n\n# Acessando a linha chamada \"Ação 1\"\nacao1 &lt;- retornos_ativos[\"Ação 1\", ]\n\n# Acessando a coluna chamada \"Ano 2\"\nano2 &lt;- retornos_ativos[, \"Ano 2\"]\n\n# Acessando o elemento na linha \"Ação 2\" e coluna \"Ano 3\"\nelemento2 &lt;- retornos_ativos[\"Ação 2\", \"Ano 3\"]\n\nEm R, diferente de outras linguagens de programação, os índices de linhas e colunas em matrizes (e também em vetores, listas, etc.) começam em 1 e não em 0. Isso significa que o primeiro elemento de uma matriz está no índice 1, o segundo no índice 2, e assim por diante\n\n\n1.6.3 Listas\nEm R, uma lista é uma estrutura de dados flexível que pode conter elementos de diferentes tipos, como vetores, matrizes, outras listas e até mesmo funções. As listas são úteis quando você precisa armazenar e manipular conjuntos de dados heterogêneos ou estruturas complexas.\nPodemos criar uma lista que armazena informações sobre um país, como seu nome, PIB, taxa de inflação e uma série temporal de valores de câmbio.\n\n# Criando uma lista com informações sobre um país\npais_info &lt;- list(\n  nome = \"Brasil\",\n  pib = 1609,\n  inflacao = 0.05,\n  cambio = c(4.86, 5.13, 5.20, 5.07, 4.97)\n)\n\nNeste exemplo, pais_info é uma lista que contém quatro elementos:\n\nnome: o nome do país (tipo caractere).\npib: o Produto Interno Bruto do país (tipo numérico).\ninflacao: a taxa de inflação do país (tipo numérico).\ncambio: uma série temporal de valores de câmbio do país (tipo vetor numérico).\n\nEsta lista exemplifica como podemos armazenar diferentes tipos de dados em uma lista em R. Ela pode ser usada para representar informações econômicas de um país de forma organizada e acessível.\nPara acessar elementos individuais em uma lista pelo nome, usamos o operador de dólar $.\n\n# Acessando o nome do país\npais_info$nome\n\n[1] \"Brasil\"\n\n# Acessando o PIB do país\npais_info$pib\n\n[1] 1609\n\n\nTambém podemos acessar elementos individuais em uma lista por índice usando colchetes [ ].\n\n# Acessando o primeiro elemento da lista (nome do país)\nprimeiro_elemento &lt;- pais_info[[1]]\n\n# Acessando o terceiro elemento da lista (taxa de inflação)\nterceiro_elemento &lt;- pais_info[[3]]\n\nVocê deve ter notado o uso de colchetes duplos para acessar os elementos da lista. Em R, os colchetes simples ([]) e duplos ([[]]) têm diferentes propósitos quando usados para acessar elementos em uma lista.\nEm resumo, os colchetes simples são usados para acessar subconjuntos de elementos em uma lista, preservando sua estrutura, enquanto os colchetes duplos são usados para acessar valores individuais de uma lista, sem preservar a estrutura original.\n\n\n1.6.4 DataFrames\nvetor, matriz, listas, dataframe\nutilizando R como calculadora, números especiais"
  },
  {
    "objectID": "01-fundamentos_r.html#exercícios",
    "href": "01-fundamentos_r.html#exercícios",
    "title": "1  Fundamentos de R",
    "section": "1.7 Exercícios",
    "text": "1.7 Exercícios\nutilize a funcao class e avalie a diferenca entre pais_info[1] e e pais_info[[2]]"
  }
]